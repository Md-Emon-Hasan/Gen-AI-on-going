import os
from dotenv import load_dotenv
from langchain_community.document_loaders import TextLoader
import google.generativeai as genai
from langchain_core.output_parsers import StrOutputParser
from langchain_core.prompts import PromptTemplate

# Load environment variables from .env file
load_dotenv()

# Initialize the Google Gemini client with your API key
genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))

# Initialize the Gemini 1.5 Pro model
model = genai.GenerativeModel('gemini-1.5-pro')

# Define a function to get a response from Gemini 1.5 Pro
def get_summary_from_gemini(poem):
    prompt = f"Write a summary for the following poem: \n{poem}"
    
    # Generate content using the model
    response = model.generate_content(prompt)
    
    # Return the text part of the response
    return response.text

# Define the prompt template (though we're not using it in this version)
prompt = PromptTemplate(
    template='Write a summary for the following poem - \n {poem}',
    input_variables=['poem']
)

# Get the directory where the script is located
script_dir = os.path.dirname(os.path.abspath(__file__))

# Construct the relative path to your PDF file
pdf_path = os.path.join(script_dir, 'cricket.txt')

# Load the text file using TextLoader
loader = TextLoader(pdf_path, encoding='utf-8')

# Load documents from the file
docs = loader.load()

# Print document information (optional)
print(type(docs))  # This will print the type of the loaded document
print(len(docs))  # This will print the number of pages/documents
print(docs[0].page_content)  # This will print the content of the first page
print(docs[0].metadata)  # This will print metadata if any

# Use the function to get a summary from Gemini
try:
    summary_text = get_summary_from_gemini(docs[0].page_content)
    print("Summary generated by Gemini:")
    print(summary_text)
except Exception as e:
    print(f"An error occurred: {str(e)}")
